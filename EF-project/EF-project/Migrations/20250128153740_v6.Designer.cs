// <auto-generated />
using EF_project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_project.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20250128153740_v6")]
    partial class v6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_project.Models.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "T-Shirt"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Jeans"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Hoodie"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Jacket"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Suit"
                        });
                });

            modelBuilder.Entity("EF_project.Models.Favorites", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("EF_project.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Price = 19,
                            ProductName = "Black T-Shirt"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Price = 15,
                            ProductName = "White T-Shirt"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Price = 17,
                            ProductName = "Blue T-Shirt"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Price = 18,
                            ProductName = "Gray T-Shirt"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            Price = 20,
                            ProductName = "Red T-Shirt"
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Price = 49,
                            ProductName = "Slim Fit Blue Jeans"
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            Price = 54,
                            ProductName = "Regular Fit Black Jeans"
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Price = 59,
                            ProductName = "Skinny Fit Gray Jeans"
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            Price = 44,
                            ProductName = "Relaxed Fit Light Blue Jeans"
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            Price = 49,
                            ProductName = "Straight Fit Dark Blue Jeans"
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3,
                            Price = 39,
                            ProductName = "Black Hoodie"
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 3,
                            Price = 34,
                            ProductName = "Gray Hoodie"
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3,
                            Price = 37,
                            ProductName = "Navy Hoodie"
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 3,
                            Price = 35,
                            ProductName = "Green Hoodie"
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 3,
                            Price = 40,
                            ProductName = "Red Hoodie"
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 4,
                            Price = 99,
                            ProductName = "Bomber Jacket"
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 4,
                            Price = 149,
                            ProductName = "Leather Jacket"
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 4,
                            Price = 79,
                            ProductName = "Denim Jacket"
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 4,
                            Price = 129,
                            ProductName = "Parka Jacket"
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 4,
                            Price = 69,
                            ProductName = "Windbreaker Jacket"
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 5,
                            Price = 199,
                            ProductName = "Single-Breasted Suit"
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 5,
                            Price = 249,
                            ProductName = "Double-Breasted Suit"
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 5,
                            Price = 219,
                            ProductName = "Slim Fit Suit"
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 5,
                            Price = 189,
                            ProductName = "Classic Fit Suit"
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 5,
                            Price = 179,
                            ProductName = "Two-Piece Suit"
                        });
                });

            modelBuilder.Entity("EF_project.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EF_project.Models.Favorites", b =>
                {
                    b.HasOne("EF_project.Models.Products", "products")
                        .WithMany("favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_project.Models.User", "user")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("products");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EF_project.Models.Products", b =>
                {
                    b.HasOne("EF_project.Models.Categories", "categories")
                        .WithMany("products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categories");
                });

            modelBuilder.Entity("EF_project.Models.Categories", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("EF_project.Models.Products", b =>
                {
                    b.Navigation("favorites");
                });

            modelBuilder.Entity("EF_project.Models.User", b =>
                {
                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
